{"version":3,"sources":["components/Navbar.js","components/Post.js","Event.js","AddEvent.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Post","state","posts","require","consumer_key","consumer_secret","access_token","access_token_secret","get","q","count","err","data","response","console","log","this","postList","length","map","post","key","id","title","body","Component","Event","_ref","events","deleteEvent","eventList","event","eventName","hashtag","onClick","AddEvent","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","props","startEvent","onSubmit","type","name","onChange","App","Math","random","concat","toConsumableArray","filter","react_router_dom","components_Navbar","react_router","path","component","src_Event","src_AddEvent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eb2ef16.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n    return(\n        <nav className=\"new-wrapper blue light-3\">\n            <div className=\"center\">\n                <a className=\"brand-logo\">Live Hashtag Event</a>\n                <ul className=\"right\">\n                    <li><a href=\"/\">Home</a> </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\nexport default Navbar","import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass Post extends Component{\n    state = {\n        posts: [ ]\n    }\n    \n    componentDidMount(){\n        var Twit = require('twit')\n        var T = new Twit({\n            consumer_key:         '60TuP2PXD3PThnBxrYSRIUg6x',\n            consumer_secret:      'FgACMYZ6YmL3ioQiX0yPx6JCglyOxEEfYGUjKs0BPRwnlFmsJl',\n            access_token:         '2269230518-bDHmGjfxvwzaQrIhhqHgLTH7dCKO1w0mbh27S24',\n            access_token_secret:  'NKJhpX2WfAcFugJUmAzlp5A9aIy5nHFyhPHfaw3WWVOl4',\n               })\n        T.get('search/tweets', { q: 'banana since:2011-07-11', count: 100 }, function(err, data, response) {\n                console.log(data)\n        })\n        // axios.get('https://api.twitter.com/1.1/application/rate_limit_status.json',{headers:  {\"OAuth oauth_consumer_key\"=\"60TuP2PXD3PThnBxrYSRIUg6x\",\"oauth_token\":\"2269230518-bDHmGjfxvwzaQrIhhqHgLTH7dCKO1w0mbh27S24\",\"oauth_signature_method\":\"HMAC-SHA1\",\"oauth_timestamp\":\"1555909061\",\"oauth_nonce\":\"kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg\",\"oauth_version\":\"1.0\",\"oauth_signature\":\"ffUO3ROxihIonCTNs%2F%2BLvTipd0Q%3D\"}})\n        //     .then(res => {\n        //         console.log(res)\n        //         this.setState({\n        //             posts: res.data.slice(0,10)\n        //         })\n        //     })\n    }\n    render() {\n        const { posts } = this.state;\n        const postList = posts.length ? (\n            posts.map(post => {\n                return(\n                    <div className=\"post card\" key={post.id}>\n                        <div className=\"card-content\">\n                            <span className=\"card-title\">{post.title}</span>\n                            <p>{post.body}</p>\n                        </div>\n                    </div>\n                )\n            })\n        ) : (\n            <div className=\"center\">No posts yet</div>\n\n        )\n        return(\n            <div className=\"container\">\n                <h4>Event Name</h4>\n                <p>#Hashtag #posts #users</p>\n                {postList}\n                \n            </div>\n        )\n    }\n}\nexport default Post","//this primarily concerns UI, hence is stateless component, hence no need of class(viz. used for data i/o), only functional\nimport React from 'react';\n\nconst Event = ({events, deleteEvent}) =>  {                      //passing props as a parameter to the function, props can be more than one separating by comma, here it is {users}\n    const eventList = events.map(event => {               //here we map through each individual user and store in the array userList\n        return(\n            <div className=\"event\" key = {event.id}>\n                <div> {event.eventName} : {event.hashtag} </div>\n                <button onClick={() => {deleteEvent(event.id)}}>Delete</button>\n            </div>\n        )\n    })\n    return(\n        <div className=\"event-list\">                 {/* here we output the whole list of users */}\n            { eventList }\n        </div>\n    )\n}\nexport default Event                                 //Nested it to the Root component i.e. App.js","import React , { Component } from 'react'\n\nclass AddEvent extends Component {\n    state = {\n        eventName: null,\n        hashtag: null\n    }\n    handleChange = (e) => {                    // function to handle the form inputs with parameter e as event\n        this.setState({\n            [e.target.id]: e.target.value,       //the value of each object updates in realtime to input value by matching the id of object\n        })\n    }\n    handleSubmit = (e) => {                    \n        e.preventDefault();\n        this.props.startEvent(this.state);\n        console.log(this.state.eventName)\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label> Event Name: </label>\n                    <input type=\"text\" name=\"\" id=\"eventName\" onChange={this.handleChange} />        {/* Add default text input field */}\n                    <label> Hashtag: </label>\n                    <input type=\"text\" name=\"\" id=\"hashtag\" onChange={this.handleChange} />\n                    <button>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddEvent;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar'\nimport Post from './components/Post'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Event from './Event';\nimport AddEvent from './AddEvent';\nimport './App.css';\n\nclass App extends Component {           //Here, there is no React.component as it has been imported above\n  state = {\n    events : [\n      {eventName:'Google Dev', hashtag:'dev', id:1},\n      {eventName:'Amazon AWS', hashtag:'aws', id:2}\n    ]\n  }\n  startEvent = (event) => {\n    event.id = Math.random();\n    let events = [...this.state.events, event];\n    this.setState({\n      events: events \n    })\n  }\n  deleteEvent = (id)=> {\n    let events = this.state.events.filter(event =>{\n      return event.id !== id;\n    });\n    this.setState({\n      events: events \n    })\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Route path='/post' component = {Post} />\n          <header className=\"App-header\">\n            <h2 className=\"center\">Start your live Hashtag event</h2>\n            <Event deleteEvent={this.deleteEvent} events={this.state.events} />          {/* This is to tell it what component and what 'prop'(erty) to render in the webpage */}\n            <div id=\"form\" className=\"container\">\n              <AddEvent startEvent={this.startEvent} />\n            </div>\n          </header>\n        </div>\n      </BrowserRouter>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}